//
//  ViewController.swift
//  CryptoLab7
//
//  Created by Dron on 10.04.2020.
//  Copyright ¬© 2020 com.dron. All rights reserved.
//

import UIKit

class ViewController: UIViewController {
    
    //–æ–±'—î–∫—Ç–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥—É –ª–æ–≥—ñ–Ω—É —Ç–∞ –ø–∞—Ä–æ–ª—é
    @IBOutlet weak var loginTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!

    //—Ñ—É–Ω–∫—Ü—ñ—è –∂–∏—Ç—Ç—î–¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ –µ–∫—Ä–∞–Ω—É, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ –µ–∫—Ä–∞–Ω –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }

    //–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ç—Ä–∏–≥–µ—Ä–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É "Without authorization"
    @IBAction func actionWithAuthorization(_ sender: UIButton) {
        //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–Ω—É —Ç–∞ –ø–∞—Ä–æ–ª—é –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –ø–æ–ª–µ–π
        if let login = self.loginTextField.text, let password = self.passwordTextField.text {
            Networking.shared.getDataWithAuthorization(username: login, password: password, success: { info in
                var string = ""
                for infoItem in info {
                    string.append("\(infoItem.getInfo())\n")
                }
                DispatchQueue.main.async {
                    UIAlertController.showMessage(from: self, message: (title: "DATA:", body: "\(string)"))
                }
                
            }) { (error) in
                DispatchQueue.main.async {
                    UIAlertController.showAnonError(from: self)
                }
                
            }
        }
    }
    
    //–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ç—Ä–∏–≥–µ—Ä–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É "Without authorization"
    @IBAction func actionWithoutAuthorization(_ sender: UIButton) {
        Networking.shared.getDataWithoutAuthorization(success: { info in
            var string = ""
            for infoItem in info {
                string.append("\(infoItem.getInfo())\n")
            }
            DispatchQueue.main.async {
                UIAlertController.showMessage(from: self, message: (title: "DATA:", body: "\(string)"))
            }
        }) { (error) in
            DispatchQueue.main.async {
                UIAlertController.showAnonError(from: self)
            }
        }
    }

}
//—Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–ª–∞—Å—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥–æ–≤–∏—Ö –≤—ñ–∫–æ–Ω –∑ –¥–æ–ø–æ–º—ñ–∂–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –ø–æ–º–∏–ª–æ–∫
extension UIAlertController {
    
    class func showMessage(from vc: UIViewController, message: (title: String, body: String)) {
        let alert = UIAlertController(title: message.title, message: message.body, preferredStyle: UIAlertController.Style.alert)
        
        alert.addAction(
            UIAlertAction(title: "üëçüèª", style: UIAlertAction.Style.destructive, handler: { _ in
                
            })
        )
        
        vc.present(alert, animated: true, completion: nil)
    }
    
    class func showAnonError(from vc: UIViewController) {
        let alert = UIAlertController(title: "Getting data error", message: "Provide login and password", preferredStyle: UIAlertController.Style.alert)
        
        alert.addAction(
            UIAlertAction(title: NSLocalizedString("–û–ö", comment: ""), style: UIAlertAction.Style.destructive, handler: { _ in
                
            })
        )
        
        vc.present(alert, animated: true, completion: nil)
    }
}

